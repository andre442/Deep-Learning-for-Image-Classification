# -*- coding: utf-8 -*-
"""Cópia de Lab3_melhor_resultado_best.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16rO40AyP2QbeqGU7gpdOHRYuSdBhuAsV

# LAB 3 _ PT2

#1. Importando arquivos do Google Drive
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""# Importando módulos """

import numpy as np
import cv2
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from PIL import Image
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_v3 import preprocess_input
from keras.models import Model
from keras.layers import GlobalAveragePooling2D
from keras.preprocessing import image
from keras import utils as np_utils
print('Done')

"""#Verificando GPU"""

import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

!nvidia-smi

"""#Definindo algumas variáveis
(número de classes, épocas, tamanho dos batch, **arquivos de entrada**...)
"""

####### Google Drive
drive_path = '/content/drive/My Drive/Colab Notebooks/bases_lab3/base_augmented_64/'

## Classes
num_classes = 12

## Batch Size
batch_size = 64

## Epochs
n_epochs = 200

####### Input Image Dimension
img_rows, img_cols = 64, 64

#Input Shape
input_shape = (img_rows, img_cols, 1)

print('Done')

"""#Carregando arquivos da base"""

x_train_a =  drive_path + 'x_train.npy'
x_test_a = drive_path + 'x_test.npy'
y_train_a = drive_path + 'y_train.npy'
y_test_a = drive_path + 'y_test.npy'
label_a = drive_path + 'label.npy'
x_train = np.load(x_train_a)
x_test = np.load(x_test_a)
y_train = np.load(y_train_a)
y_test = np.load(y_test_a)
label = np.load(label_a)
print('Done')

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""# **2. Definindo o modelo da CNN**"""

## Create CNN model
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(Dropout(0.5))##########camada adicional de dropout*********************
model.add(Conv2D(64, (3, 3), activation='relu'))##########camada adicional
model.add(Dropout(0.25))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))##########camada adicional
model.add(Dropout(0.25))
model.add(Flatten())    ########vetor de caracteristicas
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

## Print CNN layers
print ('Network structure ----------------------------------')

#for i, layer in enumerate(model.layers):
#     print(i,layer.name)
#     if hasattr(layer, 'output_shape'):
#         print(layer.output_shape)

model.summary()

print ('----------------------------------------------------')

"""# **3. Configurando e treinando a CNN**"""

## Configures the model for training
model.compile(metrics=['accuracy'], loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.SGD(learning_rate=0.0025))

## Trains the model
history = model.fit(x=x_train, y=y_train, batch_size=batch_size, shuffle=True, epochs=n_epochs, verbose=1, validation_data=(x_test, y_test))

score = model.evaluate(x_test, y_test, verbose=0)
print ('\n----------------------------------------------------\n')
print ('Test loss:', score[0])
print ('Test accuracy:', score[1])
print ('\n----------------------------------------------------\n')

## Classes predicted
#print (model.predict_classes(x_test)) 

## Classes probability
#print (model.predict_proba(x_test))

"""# Matriz de confusão"""

pred = []
y_pred = model.predict_classes(x_test)
# y_pred = y_prob.argmax(axis=-1)
for i in range(len(x_test)):
	pred.append(y_pred[i])
print (confusion_matrix(label, pred))

"""# Plotando gráficos"""

acc = history.history['accuracy'] # history['acc'] / history['accuracy']
val_acc = history.history['val_accuracy'] # history['val_acc'] / history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
 
epochs = range(len(acc))
 
plt.plot(epochs, acc, 'g', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()
 
plt.figure()
 
plt.plot(epochs, loss, 'g', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
 
plt.show()